%{
#include "c.h"
#include <stdint.h>

#define NODEPTR_TYPE Node
#define OP_LABEL(p) ((p)->op)
#define LEFT_CHILD(p) ((p)->kids[0])
#define RIGHT_CHILD(p) ((p)->kids[1])
#define STATE_LABEL(p) ((p)->x.state)
static void address(Symbol, Symbol, long);
static void blkfetch(int, int, int, int);
static void blkloop(int, int, int, int, int, int[]);
static void blkstore(int, int, int, int);
static void defaddress(Symbol);
static void defconst(int, int, Value);
static void defstring(int, char *);
static void defsymbol(Symbol);
static void doarg(Node);
static void emit2(Node);
static void export(Symbol);
static void clobber(Node);
static void function(Symbol, Symbol [], Symbol [], int);
static void global(Symbol);
static void import(Symbol);
static void local(Symbol);
static void progbeg(int, char **);
static void progend(void);
static void segment(int);
static void space(int);
static void target(Node);
static int memop(Node, int);
static int byteswap(Node p, int cost);
static int rmw(Node, int);
extern int sametree(Node, Node);

static Symbol rmap(int opk);


extern void gen_dumptree(Node p);

extern void emitstring(const char *fmt, Node p, Node *kids, short *nts);

#undef _
#undef __

#define EMIT(x) emitstring(x, p, kids, nts)
#define _(x) "\t" x "\n"
#define __(x) x "\n"

#define short_mm_only(cost) longMM ? LBURG_MAX : cost

#define hasargs(p) (p->syms[0] && p->syms[0]->u.c.v.i > 0 ? 0 : LBURG_MAX)

static unsigned constValue(Node p);


// long memory model?
static int longMM = 0;
static int cseg = 0;
static int inFunction = 0;
static int roffset = 0;
static FunctionAttr *cfunc_attr = NULL;
static Symbol wdc_retv = NULL;

enum {
    RegT = 0,
    RegR,
    RegV,
    RegP
};


struct vector {
    void **data;
    unsigned size;
    unsigned capacity;
};

void grow_vector(struct vector *v, unsigned new_capacity) {

    void **tmp;

    if (!v) return;
    if (v->capacity >= new_capacity) return;

    tmp = realloc(v->data, new_capacity * sizeof(void *));

    if (!tmp) {
        error("insufficient memory\n");
        exit(1);
    }

    memset(tmp + v->capacity, 0, (new_capacity - v->capacity) * sizeof(void *));
    v->data = (void **)tmp;
    v->capacity = new_capacity;
}

void push_vector(struct vector *v, void *data) {
    if (v->size == v->capacity)
        grow_vector(v, v->size + 20);
    v->data[v->size++] = data;
}

static struct vector export_vector = { 0, 0, 0 };
static struct vector import_vector = { 0, 0, 0 };

%}
%start stmt


# ./o/ops c=1 i=2 l=4 h=4 p=4 
# ./o/ops c=1 s=2 i=2 l=4 h=8 p=4 x=10

%term CNSTF4=4113 CNSTF8=8209 CNSTF10=10257
%term CNSTI1=1045 CNSTI2=2069 CNSTI4=4117 CNSTI8=8213
%term CNSTP4=4119
%term CNSTU1=1046 CNSTU2=2070 CNSTU4=4118 CNSTU8=8214

%term ARGB=41
%term ARGF4=4129 ARGF8=8225 ARGF10=10273
%term ARGI2=2085 ARGI4=4133 ARGI8=8229
%term ARGP4=4135
%term ARGU2=2086 ARGU4=4134 ARGU8=8230

%term ASGNB=57
%term ASGNF4=4145 ASGNF8=8241 ASGNF10=10289
%term ASGNI1=1077 ASGNI2=2101 ASGNI4=4149 ASGNI8=8245
%term ASGNP4=4151
%term ASGNU1=1078 ASGNU2=2102 ASGNU4=4150 ASGNU8=8246

%term INDIRB=73
%term INDIRF4=4161 INDIRF8=8257 INDIRF10=10305
%term INDIRI1=1093 INDIRI2=2117 INDIRI4=4165 INDIRI8=8261
%term INDIRP4=4167
%term INDIRU1=1094 INDIRU2=2118 INDIRU4=4166 INDIRU8=8262

%term CVFF4=4209 CVFF8=8305 CVFF10=10353
%term CVFI2=2165 CVFI4=4213 CVFI8=8309

%term CVIF4=4225 CVIF8=8321 CVIF10=10369
%term CVII1=1157 CVII2=2181 CVII4=4229 CVII8=8325
%term CVIU1=1158 CVIU2=2182 CVIU4=4230 CVIU8=8326

%term CVPU4=4246

%term CVUI1=1205 CVUI2=2229 CVUI4=4277 CVUI8=8373
%term CVUP4=4279
%term CVUU1=1206 CVUU2=2230 CVUU4=4278 CVUU8=8374

%term NEGF4=4289 NEGF8=8385 NEGF10=10433
%term NEGI2=2245 NEGI4=4293 NEGI8=8389

%term CALLB=217
%term CALLF4=4305 CALLF8=8401 CALLF10=10449
%term CALLI2=2261 CALLI4=4309 CALLI8=8405
%term CALLP4=4311
%term CALLU2=2262 CALLU4=4310 CALLU8=8406
%term CALLV=216

%term XCALLV=616

%term RETF4=4337 RETF8=8433 RETF10=10481
%term RETI2=2293 RETI4=4341 RETI8=8437
%term RETP4=4343
%term RETU2=2294 RETU4=4342 RETU8=8438
%term RETV=248

%term ADDRGP4=4359

%term ADDRFP4=4375

%term ADDRLP4=4391

%term ADDF4=4401 ADDF8=8497 ADDF10=10545
%term ADDI2=2357 ADDI4=4405 ADDI8=8501
%term ADDP4=4407
%term ADDU2=2358 ADDU4=4406 ADDU8=8502

%term SUBF4=4417 SUBF8=8513 SUBF10=10561
%term SUBI2=2373 SUBI4=4421 SUBI8=8517
%term SUBP4=4423
%term SUBU2=2374 SUBU4=4422 SUBU8=8518

%term LSHI2=2389 LSHI4=4437 LSHI8=8533
%term LSHU2=2390 LSHU4=4438 LSHU8=8534

%term MODI2=2405 MODI4=4453 MODI8=8549
%term MODU2=2406 MODU4=4454 MODU8=8550

%term RSHI2=2421 RSHI4=4469 RSHI8=8565
%term RSHU2=2422 RSHU4=4470 RSHU8=8566

%term BANDI2=2437 BANDI4=4485 BANDI8=8581
%term BANDU2=2438 BANDU4=4486 BANDU8=8582

%term BCOMI2=2453 BCOMI4=4501 BCOMI8=8597
%term BCOMU2=2454 BCOMU4=4502 BCOMU8=8598

%term BORI2=2469 BORI4=4517 BORI8=8613
%term BORU2=2470 BORU4=4518 BORU8=8614

%term BXORI2=2485 BXORI4=4533 BXORI8=8629
%term BXORU2=2486 BXORU4=4534 BXORU8=8630

%term DIVF4=4545 DIVF8=8641 DIVF10=10689
%term DIVI2=2501 DIVI4=4549 DIVI8=8645
%term DIVU2=2502 DIVU4=4550 DIVU8=8646

%term MULF4=4561 MULF8=8657 MULF10=10705
%term MULI2=2517 MULI4=4565 MULI8=8661
%term MULU2=2518 MULU4=4566 MULU8=8662

%term EQF4=4577 EQF8=8673 EQF10=10721
%term EQI2=2533 EQI4=4581 EQI8=8677
%term EQU2=2534 EQU4=4582 EQU8=8678

%term GEF4=4593 GEF8=8689 GEF10=10737
%term GEI2=2549 GEI4=4597 GEI8=8693
%term GEU2=2550 GEU4=4598 GEU8=8694

%term GTF4=4609 GTF8=8705 GTF10=10753
%term GTI2=2565 GTI4=4613 GTI8=8709
%term GTU2=2566 GTU4=4614 GTU8=8710

%term LEF4=4625 LEF8=8721 LEF10=10769
%term LEI2=2581 LEI4=4629 LEI8=8725
%term LEU2=2582 LEU4=4630 LEU8=8726

%term LTF4=4641 LTF8=8737 LTF10=10785
%term LTI2=2597 LTI4=4645 LTI8=8741
%term LTU2=2598 LTU4=4646 LTU8=8742

%term NEF4=4657 NEF8=8753 NEF10=10801
%term NEI2=2613 NEI4=4661 NEI8=8757
%term NEU2=2614 NEU4=4662 NEU8=8758

%term JUMPV=584

%term LABELV=600

%term LOADB=233
%term LOADF4=4321 LOADF8=8417 LOADF10=10465
%term LOADI1=1253 LOADI2=2277 LOADI4=4325 LOADI8=8421
%term LOADP4=4327
%term LOADU1=1254 LOADU2=2278 LOADU4=4326 LOADU8=8422

%term VREGP=711

%%

stmt: LABELV "%a\n"


address: ADDRGP4 "%a"
addressDP: ADDRLP4 "%a"
addressDP: ADDRFP4 "%a"

address_with_modifier: ADDRGP4 "|%a" longMM ? LBURG_MAX : 0
address_with_modifier: ADDRGP4 ">%a" 0
address_with_modifier: const ">%0" 0
address_with_modifier: ADDRLP4 "<%0" 0
address_with_modifier: ADDRFP4 "<%0" 0

#address_in_bank: ADDRGP4 "|%a" longMM ? LBURG_MAX : 0

%include "src/wdc65816/const.lburg"




reg:  INDIRI1(VREGP)     "# read register\n"
reg:  INDIRU1(VREGP)     "# read register\n"

reg:  INDIRI2(VREGP)     "# read register\n"
reg:  INDIRU2(VREGP)     "# read register\n"

reg:  INDIRF4(VREGP)     "# read register\n"
reg:  INDIRI4(VREGP)     "# read register\n"
reg:  INDIRP4(VREGP)     "# read register\n"
reg:  INDIRU4(VREGP)     "# read register\n"

reg:  INDIRF8(VREGP)     "# read register\n"
reg:  INDIRI8(VREGP)     "# read register\n"
reg:  INDIRU8(VREGP)     "# read register\n"

reg:  INDIRF10(VREGP)     "# read register\n"


# for pascal return.
reg: CNSTI2 {
    lda #%a
    sta %c
} 2

reg: CNSTU2 {
    lda #%a
    sta %c
} 2

reg: CNSTI4 {
    lda #%a
    sta %c
    lda #^%a
    sta %c+2
} 2

reg: CNSTU4 {
    lda #%a
    sta %c
    lda #^%a
    sta %c+2
} 2

reg: CNSTP4 {
    lda #%a
    sta %c
    lda #^%a
    sta %c+2
} 2


stmt: ASGNI1(VREGP,reg)  "# write register\n"
stmt: ASGNU1(VREGP,reg)  "# write register\n"

stmt: ASGNI2(VREGP,reg)  "# write register\n"
stmt: ASGNU2(VREGP,reg)  "# write register\n"

stmt: ASGNF4(VREGP,reg)  "# write register\n"
stmt: ASGNI4(VREGP,reg)  "# write register\n"
stmt: ASGNP4(VREGP,reg)  "# write register\n"
stmt: ASGNU4(VREGP,reg)  "# write register\n"

stmt: ASGNF8(VREGP,reg)  "# write register\n"
stmt: ASGNI8(VREGP,reg)  "# write register\n"
stmt: ASGNU8(VREGP,reg)  "# write register\n"

vregp: VREGP "%a" 0
vregp: ADDRLP4 "%a" 0
vregp: ADDRFP4 "%a" 0

# when simplify didn't do ADD+P
#vregp: ADDP4(vregp, const) "%0+%1"

stmt: reg ""


reg: address {
    lda #%0
    sta %c
    lda #^%0
    sta %c+2
} 4

reg: addressDP {
    tdc
    clc
    adc #%0
    sta %c
    stz %c+2
} 5

rc: const  "%#%0"
rc: reg    "%0"

%include "src/wdc65816/assign.lburg"
%include "src/wdc65816/load.lburg"
%include "src/wdc65816/indir.lburg"
%include "src/wdc65816/add-sub.lburg"
%include "src/wdc65816/bitops.lburg"
%include "src/wdc65816/shift.lburg"
%include "src/wdc65816/multiply.lburg"
%include "src/wdc65816/call.lburg"
%include "src/wdc65816/builtin.lburg"
%include "src/wdc65816/arg.lburg"
%include "src/wdc65816/branch.lburg"
%include "src/wdc65816/convert.lburg"
%include "src/wdc65816/return.lburg"
%include "src/wdc65816/struct.lburg"
%include "src/wdc65816/memop.lburg"


%include "src/wdc65816/tadpole.lburg"
%include "src/wdc65816/regAX.lburg"

%include "src/wdc65816/array.lburg"


# switch jump tables
# nb -- uses 16-bit jump table pointers.
stmt: JUMPV(INDIRP4(ADDP4(LSHI4(CVII4(reg), const_2), address))) {
    ; jump table... %0 %1 %2
    lda %0
    asl a
    ;asl a ; extra shift due to long table.
    tax
    jmp (|%2,x)
}


#pragma mark - byteswap optimizations

reg: BORU2(LSHU2(reg, const_8), RSHU2(reg, const_8)) {
    lda %0
    xba
    sta %c
} byteswap(a, 3)

reg: ADDU2(LSHU2(reg, const_8), RSHU2(reg, const_8)) {
    lda %0
    xba
    sta %c
} byteswap(a, 3)


#pragma mark - rotate optimizations


# rotate right
reg: BORU2(LSHU2(reg, const_15), RSHU2(reg, const_1)) {
    lda %0
    lsr a
    bcc @ok
    ora #$8000
@ok
    sta %c
} byteswap(a, 5)

# rotate left
reg: BORU2(RSHU2(reg, const_15), LSHU2(reg, const_1)) {
    lda %0
    cmp #$8000
    rol a
    sta %c
} byteswap(a, 5)






# char c; c = c + ...
stmt: ASGNI1(vregp, LOADI1(ADDI2(CVII2(INDIRI1(vregp)), rc))) {
    sep #$20
    lda %1
    clc
    adc %2
    sta %0
    rep #$20
} 5

# char c; c = c + 1;
stmt: ASGNI1(vregp, LOADI1(ADDI2(CVII2(INDIRI1(vregp)), const_1))) {
    sep #$20
    lda %1
    inc
    sta %0
    rep #$20
} 4

%%
/*
 * lda @p1 / bmi neg_x
 * lda @p2 / bmi pos_neg
 * pos_pos
 * neg_x lda @p2 bmi neg_neg
 * neg_pos
 */
#define TRACE(...) if (dflag > 1) fprintf(stderr, __VA_ARGS__)

/*
 * page 410
 * freemask - registers that are currently free.
 * usedmask - registers that have been used in this routine (set, never cleared)
 * tmask - registers to use for temporary values
 * vmask - registers to use for register variables
 * unallocable registers belong in neither tmask nor vmask.
 *
 *
 * have register sets for temporaries vs parameters? (and vs floats?)
 * set 0 = parameters, set 1 = locals?
 *
 * todo -- have temp() callback which returns a register rather than
 * ralloc using wildcard stuff, so all registers are unified.
 */


unsigned constValue(Node p) {
    Symbol s = p->syms[0];

    switch (specific(p->op)) {
    case ADDRF+P:
    case ADDRL+P: return s->x.offset;
    case CNST+I:  return s->u.c.v.i;
    case CNST+U:  return s->u.c.v.u;
    //case CNST+P:  return (s->u.c.v.p;
    }
    return 0;
}

// copied from x86.md
// checks for x = x op y
static int memop(Node p, int cost)
{
    TRACE("memop\n");

    if (cost == LBURG_MAX) return LBURG_MAX;

    assert(p);
    assert(generic(p->op) == ASGN);
    assert(p->kids[0]);
    assert(p->kids[1]);
    if (generic(p->kids[1]->kids[0]->op) == INDIR
    && sametree(p->kids[0], p->kids[1]->kids[0]->kids[0]))
        return cost;
    else
        return LBURG_MAX;
}

static int rmw(Node p, int cost) {

    //return LBURG_MAX;
    // reg: ADDU2(reg, const_1) {
    // ASGNU2(VREGP(x), ADDU2(INDIRU2(VREGP(x)), CNSTU2(1)))

    // grrrr if destination is a wildcard!

    TRACE("rmw\n");

    Symbol dest = p->syms[2];
    Symbol src1 = p->kids[0] ? p->kids[0]->syms[2] : NULL;
    Symbol src2 = p->kids[1] ? p->kids[1]->syms[2] : NULL;

    if (dest->x.wildcard) return LBURG_MAX;

    if (dest && dest == src1) return cost;
    if (dest && dest == src2) return cost;

    return LBURG_MAX;
}

static int byteswap(Node p, int cost) {

    // where reg = INDIRU2(VREGP(x))
    // BORU2(LSHU2(reg, const_8), RSHU2(reg, const_8)) {

    Symbol src1 = p->kids[0]->kids[0]->kids[0]->syms[0];
    Symbol src2 = p->kids[1]->kids[0]->kids[0]->syms[0];

    if ((src1 == src2) && !src1->x.wildcard) return cost;

    return LBURG_MAX;
}


static void import(Symbol p)
{
    Type t = p ? p->type : NULL;

    TRACE("import %s\n", p->name);
    //print("\timport %s\n", p->name);
    if (!p->ref) return;


    // inline functions don't need to be imported.
    if (t && isfunc(t) && t->u.f.attr && t->u.f.attr->function_vector)
        return;

    push_vector(&import_vector, p->name);
}
static void export(Symbol p)
{
    // todo -- move these to a list and export everthing @ the end.
    // as it is, can be within a data segment.

    TRACE("export %s\n", p->name);
    //print("\texport %s\n", p->name);

    push_vector(&export_vector, p->name);
}


static void global(Symbol p)
{
    TRACE("global %s\n", p->name);
    // if (p->generated, this is an L-type label
    // otherwise, it need to generate a global, possibly private
    // (export will be called if it needs to be exported)
    // check p->sclass to see if it's a private global?

    print("%s", p->x.name);
}


static void space(int n) {
    TRACE("space %d\n", n);
    
    print("\tds %d\n", n);
}

static void segment(int n)
{
    static char *st[] = {
        "???",
        "CODE", "BSS", "DATA", "LIT"
    };

    TRACE("segment %d - %s\n", n, st[n]);

    if (inFunction) return;

    if (n == LIT) n = DATA;

    if (cseg == n) return;

    if (cseg) {
        switch(cseg) {
        case BSS:
        case DATA: 
        case LIT: 
            print("}\n\n"); break;
        }
    }

    cseg = n;
    switch (n) {
    case BSS:
    case DATA: 
    case LIT:
        print("data {\n"); break;
    }

}

// create a dp register.  No mask.
static Symbol wdc_mkreg(int type, int offset) {

    static struct vector reg_vector = {0,0,0};

    unsigned roff = (offset * 4) + type;

    char *fmt = NULL;
    int mask = 0;
    Symbol r;

    if (reg_vector.size > roff && reg_vector.data[roff]) return reg_vector.data[roff];


    switch(type) {
        case RegT: fmt = "%%t%d"; break;
        case RegR: fmt = "%%r%d"; break;
        case RegP: fmt = "%%p%d"; break;
        case RegV: fmt = "%%v%d"; break;
    }

    r = mkreg(fmt, offset, mask, type);
    if (reg_vector.capacity <= roff) {
        unsigned size = 20;
        while (roff >= size) size *= 2;
        grow_vector(&reg_vector, size);
    }

    if (reg_vector.size <= roff) reg_vector.size = roff + 1;
    reg_vector.data[roff] = r;
    return r;
}

// copied from gen
static void setregvar(Symbol p, Symbol r) {

    p->sclass = REGISTER;
    p->x.regnode = r->x.regnode;
    p->x.regnode->vbl = p;
    p->x.name = r->x.name;
    //debug(dumpregs("(allocating %s to symbol %s)\n", p->x.name, p->name));
}

static unsigned localr(uint32_t x) {
    // currently uses a 32-bit mask for registers...
    // high bit is set.
    unsigned count = 0;

    if (x == 0) return 0;
    while (x) {
        ++count;
        x >>= 1;
    }

    return count * 2;
}



// register sizes - 16, 32, 64, 80
// need %t temporaries, %p parameters, %v variables
// and %rv return value (for pascal)

enum {
    r16 = 0,
    r32,
    r64,
    r80
};


static Symbol reg16[32+32+32];
static Symbol reg32[32+32+32];
static Symbol reg64[32+32+32];
static Symbol reg80[32+32+32];

static Symbol regA;
static Symbol regX;
static Symbol regY;
static Symbol regAX;
static Symbol regRV; // pascal return 


Symbol regwT[4];
Symbol regwV[4];
Symbol regwP[4];



static void progbeg(int argc, char *argv[])
{
    int i;

    TRACE("progbeg\n");

    {
        union {
            char c;
            int i;
        } u;
        u.i = 0;
        u.c = 1;
        swap = ((int)(u.i == 1)) != IR->little_endian;
    }
    parseflags(argc, argv);

    for (i = 0; i < argc; ++i) {
        char *arg = argv[i];
        if (strcmp(arg,"-M") == 0) {
            longMM = 1;
        }
    }

    // later...
    regA = mkreg("a", 0, 1, 4);
    regX = mkreg("x", 0, 1, 4);
    regY = mkreg("y", 0, 1, 4);
    regAX = mkreg("a:x", 0, 1, 4);
    regRV = NULL;


    memset(reg16, 0, sizeof(reg16));
    memset(reg32, 0, sizeof(reg32));
    memset(reg64, 0, sizeof(reg64));
    memset(reg80, 0, sizeof(reg80));

    // want registers %t0, %t2, %t4, ...
    // up to 32 temporary "registers" on the dp.
    for (i = 0; i < 32; ++i) {
        // put in reverse order since askreg
        // works backwards.
        Symbol r = mkreg("", i, 1, RegT);
        r->name = r->x.name = stringf("%%t%d", i * 2);

        reg16[31-i] = r;
    }

    for (i = 0; i < 32 - 1; ++i) {
        Symbol r = mkreg("", i, 3, RegT);
        r->name = r->x.name = stringf("%%t%d", i * 2);

        reg32[31-i] = r;
    }

    for (i = 0; i < 32 - 3; ++i) {
        Symbol r = mkreg("", i, 7, RegT);
        r->name = r->x.name = stringf("%%t%d", i * 2);

        reg64[31-i] = r;
    }

    for (i = 0; i < 32 - 5; ++i) {
        Symbol r = mkreg("", i, 9, RegT);
        r->name = r->x.name = stringf("%%t%d", i * 2);

        reg80[31-i] = r;
    }


    // temporaries
    regwT[r16] = mkwildcard(reg16);
    regwT[r32] = mkwildcard(reg32);
    regwT[r64] = mkwildcard(reg64);
    regwT[r80] = mkwildcard(reg80);

    // could have separate temp set for floats.
    tmask[IREG] = 0xffffffff;
    tmask[FREG] = 0;  
    vmask[IREG] = 0;
    vmask[FREG] = 0;
 
    init_builtins();


}

static void progend(void)
{
    unsigned i, l;

    TRACE("progend\n");

    // close any data segment.
    segment(CODE);

    // dump the exports.

    for (i = 0, l = import_vector.size; i < l; ++i) 
        print("\timport %s\n", import_vector.data[i]);

    for (i = 0, l = export_vector.size; i < l; ++i) 
        print("\texport %s\n", export_vector.data[i]);


    print("\n");
}


static void function(Symbol f, Symbol caller[], Symbol callee[], int n)
{

    int i;
    int argSize = 0;
    int localSize = 0;
    int pascal = 0;
    int cdecl = 0;
    int stdcall = 0;
    int pcount = 0;


    Type t = f->type;
    FunctionAttr *attr = t && t->u.f.attr ? t->u.f.attr : NULL;

    cdecl = 1;
    if (attr) {
        if (attr->pascal) { pascal = 1; cdecl = 0; stdcall = 0; }
        if (attr->stdcall) { pascal = 0; cdecl = 0; stdcall = 1 ;}
    }

    cfunc_attr = attr;


    TRACE("function\n");
    
    inFunction = 1;
    roffset = 0;

    print("function %s {\n", f->x.name);

    if (pascal) {
        print("\tpragma pascal\n");
    } else if (stdcall) {
        print("\tpragma stdcall\n");        
    } else {
        print("\tpragma cdecl\n");
    }

    if (attr) {
        if (attr->segment) print("\tpragma segment=\"%s\"\n", segment);
        if (attr->noreturn) print("\tpragma noreturn\n");
        if (attr->debug) print("\tpragma debug\n");
        if (attr->databank) print("\tpragma databank\n");
        if (attr->near) print("\tpragma rts\n");
        if (attr->interrupt) print("\tpragma rti\n");

    }



    // ugh... we don't know the true offset until after locals
    // are generated. Need to use frame-stack-relative addressing?

    // set vmask so parameters can be converted to variables.

    // 0 = temporaries
    // 1 = variables
    // 2 = parameters
    // 3 = real registers (unused...)

    tmask[0] = -1;
    tmask[1] = 0;
    tmask[2] = 0;
    tmask[3] = 0;

    vmask[0] = 0;
    vmask[1] = -1;
    vmask[2] = 0;
    vmask[3] = 0;

    freemask[0] = -1;
    freemask[1] = -1;
    freemask[2] = -1;
    freemask[3] = 0;

    //vmask[0] = vmask[1] = -1;
    //freemask[0] = freemask[1] = -1;
    //tmask[0] = tmask[1] = 0;

    // set 0 = locals, temporaries
    // set 1 = parameters.

    //assert(caller[i] == 0);
    offset = maxoffset = 0;

    // todo -- if cdecl && returning a struct, %p0 is the return pointer
    // (and parameters += 4)


    for (pcount = 0; callee[pcount]; ++pcount) ;

    // always regnerate retv?

    wdc_retv = NULL;


    // no longer needed -- use x.wants_argb() instead.
#if 0
    if (!pascal && isstruct(freturn(f->type))) {
        Symbol r = wdc_mkreg(RegP, offset);

        //wdc_retv = genident(REGISTER, ptr(unqual(freturn(f->type))), PARAM);

        setregvar(retv, r);
        retv->sclass = REGISTER;
        retv->x.offset = offset;
        print("\t; return value = %s\n", r->x.name);

        offset = 4;
    }
#endif

    for (i = 0; callee[i]; i++) {
        Symbol r = NULL;

        Symbol p = callee[i];
        Symbol q = caller[i];
        int volptr = 0;

        if (pascal) {
            p = callee[pcount - i - 1];
            q = caller[pcount - i - 1];
        }

        // check if it's a volatile pointer!
        if (isptr(p->type) && isvolatile(p->type->type))
            volptr = 1;


        p->x.offset = q->x.offset = offset;
        p->sclass = q->sclass = REGISTER; // dp is a "register"

        // todo -- if p->ref == 0, register can
        // be used for a temporary.
        // requires updates elsewhere.

        r = wdc_mkreg(RegP, offset);
        setregvar(p, r);

        q->x.name = p->x.name;

        offset += roundup(q->type->size, 2);

        if (p->generated && i == 0)
            print("\t; %s = %s\n", "return struct pointer", r->x.name);

        if (!p->generated)
            print("\t; %s = %s\n", p->name, r->x.name);

        if (volptr)
            print("\tpragma volatile %s\n", r->x.name);
        
    }

    // pascal return value...
    if (pascal && freturn(f->type) != voidtype) {
        Symbol r = wdc_mkreg(RegP, offset);

        wdc_retv = genident(REGISTER, freturn(f->type), PARAM);
        wdc_retv->defined = 1;
        wdc_retv->ref = 1;
        wdc_retv->x.offset = offset;

        setregvar(wdc_retv, r);

        if (retv) {
            setregvar(retv, r);
            retv->sclass = REGISTER;
            retv->x.offset = offset;
        }
        print("\t; return value = %s\n", r->x.name);
        regRV = r;
    }

    print("\tpragma parameters=%d\n", offset);
    offset = 0;

    // now swap tmask/vmask so no register variables, only register temporaries?
    //tmask[0] = vmask[0];
    //tmask[1] = vmask[1];

    //vmask[0] = vmask[1] = 0;

    argSize = offset;

    offset = maxoffset = 0;


    gencode(caller, callee);
    print("\tpragma locals=%d\n", roundup(maxoffset, 2));

    // todo
    maxoffset += localr(usedmask[0]);
    framesize = roundup(maxoffset, 2);


    offset = framesize;

/*
    for (i = 0; callee[i]; i++) {
        Symbol r = locals[i];
        Symbol p = callee[i];

        // can't rename register...
        print("%s\tequ %d\n", r->name, framesize + 1 + p->x.offset);
    }
*/
    //

    emitcode();


    // todo check freturn(f->type) for return type, handle



    print("}\n\n");
    inFunction = 0;
    regRV = NULL;
    wdc_retv = NULL;
}



static void defsymbol(Symbol p)
{
    TRACE("defsymbol %s\n", p->name);


    if (p->scope >= LOCAL && p->sclass == STATIC)
        p->x.name = stringf(".%s.%d", p->name, genlabel(1));
        
    else if (p->generated)
        p->x.name = stringf(".%s", p->name);
        
    else if (p->scope == GLOBAL || p->sclass == EXTERN)
        p->x.name = stringf("%s", p->name);
        

    else if (p->scope == CONSTANTS
        && (isint(p->type) || isptr(p->type))
        && p->name[0] == '0' && p->name[1] == 'x')
                p->x.name = stringf("$%s", &p->name[2]);

    else
        p->x.name = p->name;    
    
}

static void address(Symbol q, Symbol p, long n)
{
    TRACE("address %s + %ld\n", p->name, n);

    if (p->scope == GLOBAL || p->sclass == STATIC || p->sclass == EXTERN) {

        q->x.name = stringf("%s%s%D", p->x.name, n >= 0 ? "+" : "", n);
        return;
    }


    if (p->x.regnode) {
        // create a new register.
        Symbol r;

        r = wdc_mkreg(p->x.regnode->set, p->x.regnode->number + n);
        setregvar(q, r);
        return;
    }

    q->x.name = stringf("%s%s%D", p->x.name, n >= 0 ? "+" : "", n);
}

static void defconst(int suffix, int size, Value v)
{
    TRACE("defconst\n");

    assert(suffix != F); // not yet...

    switch(size)
    {

        case 1:
            // hmm... a struct will pad with space.
            // it would probably be easier if non-structs
            // were padded as well :/
            print("\tdc.b $%x\n", v.u & 0xff);
            break;
        case 2:
            print("\tdc.w $%x\n", v.u & 0xffff);
            break;
        case 4:
            print("\tdc.l $%x\n", v.u & 0xffffffff);
            break;
        case 8:
            print("\tdc.l $%x,$%x\n", v.u & 0xffffffff, v.u >> 8);
            break;

        default:
            assert(size && 0);
    }

}

static void defaddress(Symbol p)
{
    TRACE("defaddress %s\n", p->name);

    // defaddr in a CODE segment is from a switch statement, so use 16-bit address.
    if (inFunction) {
        print("\tdc.w %s\n", p->x.name);
        return;
    }
    print("\tdc.l %s\n", p->x.name);
}

static void defstring(int n, char *str)
{
    int i;
    int newline = 0;
    
    TRACE("defstring\n");
    

    for (i = 0; i < n; ++i)
    {
        if ((i & 0x07) == 0) {

            if (i) print("\n");
            print("\tdc.b $%x", str[i] & 0xff);
            continue;
        }
        print(", $%x", str[i] & 0xff);
    }
    print("\n");    
}


static void clobber(Node p)
{
    TRACE("clobber\n");
}


static void emit2(Node p)
{
    TRACE("emit2\n");
}


static int simple_convert(unsigned op) {

    return (generic(op) == CVU  || generic(op) == CVI || generic(op) == CVP)
            && (optype(op) == I || optype(op) == U || optype(op) == P);
}

static Node fix_load_indir(Node p) {

    if (p && generic(p->op) == LOAD) {
        unsigned op = p->op;

        Node child = p->kids[0];
        if (generic(child->op) == INDIR) {
            if (opsize(p->op) <= opsize(child->op)) {
                child->op = INDIR + sizeop(opsize(op)) + optype(op);
                return child;
            }
        }
    }
    return p;
}


static int fix_incr_1(Node p) {
    // ASGNP4(ADDRLP4(1), INDIRP4(ADDRFP4(cp)))
    return 
        p &&
        specific(p->op) == ASGN+P && 
        isaddrop(p->kids[0]->op) && 
        specific(p->kids[1]->op) == INDIR+P && 
        isaddrop(p->kids[1]->kids[0]->op)
    ;
}

static int fix_incr_2(Node p) {
    //ASGNP4(ADDRFP4(cp), ADDP4(INDIRP4(ADDRLP4(1)), CNSTI4(2)))
    return 
        p &&
        specific(p->op) == ASGN+P && 
        isaddrop(p->kids[0]->op) && 
        specific(p->kids[1]->op) == ADD+P && 
        specific(p->kids[1]->kids[0]->op) == INDIR+P && 
        isaddrop(p->kids[1]->kids[0]->kids[0]->op)
    ;

}

static int uses_sym(Node p, Symbol s) {
    int i;
    if (!p) return 0;
    for (i = 0; i < 3; ++i) {
        if (p->syms[i] == s) return 1;
    }
    return uses_sym(p->kids[0], s) || uses_sym(p->kids[1], s);
}

static int check_indir(Node p, Symbol s) {
    // return INDIRx if INDIRx(INDIRP(s))
    // returns -1 if INDIRx(s)
    // return 0 otherwise.

    int a, b;

    if (!p) return 0;
    if (p->syms[0] == s) return -1; // ????
    if (generic(p->op) == INDIR
        && isaddrop(p->kids[0]->op)
        && p->kids[0]->syms[0] == s) return -1;

    if (generic(p->op) == INDIR
        && specific(p->kids[0]->op) == INDIR+P 
        && isaddrop(p->kids[0]->kids[0]->op)
        && p->kids[0]->kids[0]->syms[0] == s) return p->op;

    a = check_indir(p->kids[0], s);
    if (a == -1) return -1;

    b = check_indir(p->kids[1], s);
    if (b == -1) return -1;

    if (a == b) return a;
    if (!a) return b;
    if (!b) return a;
    // mismatch!
    return -1;
}

/*
 replace
 INDIRP4(ADDRLP4(olds))
 with
 ADDRLP4(news)
*/
static Node rewrite_indir(Node p, Symbol olds, Symbol news) {

    int i;

    if (!p) return p;
    if (specific(p->op) == INDIR+P
        && isaddrop(p->kids[0]->op)
        && olds == p->kids[0]->syms[0]) {
            return newnode(ADDRL+P + sizeop(IR->ptrmetric.size), NULL, NULL, news);
    }

    for (i = 0; i < 2; ++i) if (p->kids[i]) p->kids[i] = rewrite_indir(p->kids[i], olds, news);
    return p;
}

static int reads_sym(Node p, Symbol s) {
    int i;
    if (!p || !s) return 0;
    for (i = 0; i < 3; ++i) {
        if (p->syms[i] == s) return 1;
    }

    for (i = 0; i < 2; ++i) {
        if (reads_sym(p->kids[i], s)) return 1;
    }
    return 0;
}


static Node fixup(Node p) {
    if (!p) return p;

    p->kids[0] = fixup(p->kids[0]);
    p->kids[1] = fixup(p->kids[1]);

    if (simple_convert(p->op)) {
        Node child = p->kids[0];
        if (simple_convert(child->op)) {

            // (unsigned)(signed)(char) --> needs to extend.
            if (opsize(child->op) > opsize(p->op)) {
                p->kids[0] = child->kids[0];
            }
        }
    }

    /*
    *cp++ generates this:
    ASGNP4(ADDRLP4(1), INDIRP4(ADDRFP4(cp)))
    ASGNP4(ADDRFP4(cp), ADDP4(INDIRP4(ADDRLP4(1)), CNSTI4(2)))
    RETI2(INDIRI2(INDIRP4(ADDRLP4(1))))

    ( INDIRP4(...) isn't a * deref, so can't optimize it)

    repair it to:
    ASGNI2(ADDRLP(tmp), INDIRI2(INDIRP4(ADDRLP4(cp)))
    ASGNP4(ADDRFP4(cp), ADDP4(INDIRP4(ADDRLP4(cp)), CNSTI4(2)))
    RETI2(INDIRI2(ADDRLP4(tmp)))

    if possible.
    */


    if (fix_incr_1(p)) {

        int ptr_size_op = sizeop(IR->ptrmetric.size);
        Node tmp;
        Node nodes[4];

        nodes[0] = p;
        nodes[1] = nodes[0] ? nodes[0]->link : NULL;
        nodes[2] = nodes[1] ? nodes[1]->link : NULL;
        nodes[3] = nodes[2] ? nodes[2]->link : NULL;


        if (!nodes[2]) return p;

        Symbol dest = p->kids[0]->syms[0];
        Symbol src = p->kids[1]->kids[0]->syms[0];

        tmp = nodes[1];
        if (dest->temporary && fix_incr_2(tmp) && tmp->kids[0]->syms[0] == src && tmp->kids[1]->kids[0]->kids[0]->syms[0] == dest) {

            // increment the pointer directly to generate better code [what if it's a global?]
            tmp->kids[1]->kids[0]->kids[0]->syms[0] = src; // todo -- need to generate new node (ADDRFP vs ADDRLP)

            int op = check_indir(nodes[2], dest);
            if (op > 0) {

                Node xnodes[3];

                Symbol s = temporary(REGISTER, btot(op, opsize(op)));
                // can fix it!!!

                xnodes[0] =
                    newnode(ASGN + opkind(op),
                        newnode(ADDRL+P + ptr_size_op, NULL, NULL, s),
                        newnode(INDIR + opkind(op), 
                            newnode(INDIR+P + ptr_size_op,
                                newnode(ADDRL+P + ptr_size_op, NULL, NULL, src),
                                NULL, NULL),
                            NULL, NULL),
                        NULL);

                xnodes[1] = nodes[1];

                xnodes[2] = rewrite_indir(nodes[2], dest, s);

                // if xnodes[2] is an assignment and doesn't depend on src, it can be moved to
                // the first line.
                if (generic(xnodes[2]->op) == ASGN && !reads_sym(xnodes[2], src)) {
                    tmp = xnodes[2];
                    xnodes[2] = xnodes[1];
                    xnodes[1] = tmp;
                }

                xnodes[0]->link = xnodes[1];
                xnodes[1]->link = xnodes[2];
                xnodes[2]->link = nodes[3];
                return xnodes[0];
            }


        }
    }
    return p;
}

static Node wdc_gen(Node forest) {

    Node p;

    // pre-optimize forest...

    TRACE("wdc_gen\n");
    //if (dflag > 1) gen_dumptree(forest);

    Node prev = NULL;
    for (p = forest; p; prev = p, p = p->link) {

        Node q;
        if (dflag > 1) gen_dumptree(p);

        // doesn't optimize top element...
        q = fixup(p);
        if (p == q) continue;
        if (prev) prev->link = q;
        else forest = q;
        p = q;
    }


    return gen(forest);
}

static void target(Node p)
{
    TRACE("target\n");
    if (dflag > 1) gen_dumptree(p);

    // todo -- set A/X/Y register as target under certain circumstances?
    // d = a + b + c - > rTemp = a + b; d = rTemp + c;
    // optimize to rA = a + b; d = rA + c ???
    // could use x/y for commutative - lda <a clc adc <b tax; txa clc adc <c sta d
    // or optimize to d = a + b; d = d + c; 


    if (0 && generic(p->op) == LOAD) {

        // LOAD(LOAD(LOAD(...) remove inner loads.
        Node child = p->kids[0];
        while (child && generic(child->op) == LOAD) {
            child = child->kids[0];
        }


        // while loop it?
        // LOAD(CV(...)) -- can drop convert if > size.
        if (simple_convert(child->op) && opsize(child->op) > opsize(p->op)) {
            child = child->kids[0];
        }
        p->kids[0] = child;

        if (dflag > 1) gen_dumptree(p);
    }

    //p->kids[0] = fix_load_indir(p->kids[0]);
    //p->kids[1] = fix_load_indir(p->kids[1]);


    assert(p);
    switch (specific(p->op)) {
        case RET+U: case RET+I: case RET+P: case RET+F:
            if (cfunc_attr && cfunc_attr->pascal) {
                rtarget(p, 0, regRV);
            }
            // can't currently target regA
            // because only 4 register sets.
            break;
        case CALL+I:
        case CALL+U:
        case CALL+P:
            //if (!p->syms[RX]) 
            //    setreg(p, rmap(p->op));
            //p->sclass = REGISTER;
            //askregvar(p, rmap(p->op));
            //rtarget(p, 2, rmap(p->op));
            //setreg(p, reg16[64]);
            break; 
    }


}



static void doarg(Node p)
{
    TRACE("doarg\n");
    if (dflag > 1) gen_dumptree(p);

    // this updates argoffset.
    
    assert(p && p->syms[0]);
    mkactual(2, p->syms[0]->u.c.v.i); 


    /* remove any cast if it doesn't affect the size. */
    /* 
     * eg void xxx(int); unsigned y; xxx(y)
     * is xxx((int)y) which will generate a temporary. 
     */

    // ARGI2(CVUI2(INDIRU2(ADDRFP4(i))))
    // ARGI2(CVUI2(INDIRU4(ADDRFP4(i))))
    // ARGU2(CVUU2(CVPU4(ADDRFP4(a))))
    {
        Node a, b;
        int size;

        a = p->kids[0];
        size = opsize(p->op);
        // limit to I, U, P types.
        if (0 && simple_convert(a->op)) {

                Node child = a->kids[0];

                while (simple_convert(child->op) && opsize(child->op) >= size) {

                    child = child->kids[0];
                }
                a->kids[0] = child;

                if (generic(child->op) == INDIR 
                    && (optype(child->op) == I || optype(child->op) == U || optype(child->op) == P)
                    && opsize(child->op) >= size) {
                        // remove the CV cast.
                        p->kids[0] = child;
                }
        }


    }

}

static Symbol rmap(int opk)
{
    TRACE("rmap\n");

    switch (opsize(opk)) {
        case 1:
        case 2:
            return regwT[r16];
        case 4:
            return regwT[r32];
        case 8:
            return regwT[r64];
        case 10:
            return regwT[r80];

        default:
            assert ("bad opsize");
    }

    return 0;
}


static Symbol vmap(int opk)
{
    TRACE("vmap\n");

    switch (opsize(opk)) {
        case 1:
        case 2:
            return regwV[r16];
        case 4:
            return regwV[r32];
        case 8:
            return regwV[r64];
        case 10:
            return regwV[r80];

        default:
            assert ("bad opsize");
    }

    return 0;
}


static void local(Symbol p)
{
    TRACE("local %s\n", p->name);


    //print("\t; %s = %d\n", p->name, offset + 1);


    p->sclass = REGISTER;

    // askregvar specifically uses vmask unless it's a temporary.

    // retv already handled... will it ask again?
    if (p == retv) return;
    if (p == wdc_retv) return;


    if (p->temporary) {
        askregvar(p, rmap(ttob(p->type)));
        return;
    }

    if(!p->addressed && isscalar(p->type)) {

        Symbol r = wdc_mkreg(RegR, roffset);

        roffset = roundup(roffset + p->type->size, 2);

        print("\t; %s = %s\n", p->name, r->name);

        setregvar(p, r);
        return;

    }
    // if addressed, array, or struct, generate a %v register.
    if (1) {

        Symbol r = wdc_mkreg(RegV, offset);

        offset = roundup(offset + p->type->size, 2);

        print("\t; %s = %s\n", p->name, r->name);

        setregvar(p, r);
        return;
    }
}



static int preventCSE(Node p)
{

    TRACE("preventCSE\n");

    if (dflag > 1) gen_dumptree(p);

    /*
     called from dag.c walk -> undag -> visit
     to prevent CSE from "optimizing" direct page and constants.
    */



    unsigned gop;
    gop = generic(p->op);

    // TODO - fp consts?
    if (gop == CNST)
    {
        return 1;
    }
    
    // interferes w/ *cp++;

    return 0;

    if (gop == INDIR)
    {
        unsigned gop;
        p = p->kids[0];

        gop = generic(p->op);
        if (gop == ADDRF || gop == ADDRL || gop == ADDRG)
            return 1;
    }

    return 0;
}


void wdc_blockbeg(Env *e) {
    TRACE("blockbeg\n");
    blockbeg(e);
}

void wdc_blockend(Env *e) {
    TRACE("blockend\n");
    blockend(e);
}

static int left_to_right(Type t)
{
    FunctionAttr *attr = t && t->u.f.attr ? t->u.f.attr : NULL;

    if (attr && attr->pascal) return 1;
    return 0;
}

static int wants_callb(Type t)
{
    FunctionAttr *attr = t && t->u.f.attr ? t->u.f.attr : NULL;

    if (attr && attr->pascal) return 1;
    return 0;
}


/*
 * mulops_calls is set to 0.  While it is true that mulops are calls,
 * admitting so forces multiplications into a temporary register.
 * lying about it generates better code.
 *
 */
Interface wdc65816IR = {
        1, 1, 0,  /* char */
        2, 2, 0,  /* short */
        2, 2, 0,  /* int */
        4, 2, 0,  /* long */
        8, 2, 0,  /* long long */
        4, 2, 0,  /* float */
        8, 2, 0,  /* double */
        10, 2, 0,  /* long double */
        4, 2, 0,  /* pointer T *  */
        0, 1, 0,  /* struct */
        1,        /* little_endian */
        0,        /* mulops_calls */
        1,        /* wants_callb */
        1,        /* wants_argb */
        0,        /* left_to_right */
        0,        /* wants_dag */
        1,        /* unsigned_char */
        1,        /* wants_xcall */

        address,
        wdc_blockbeg,
        wdc_blockend,
        defaddress,
        defconst,
        defstring,
        defsymbol,
        emit,
        export,
        function,
        wdc_gen,
        global,
        import,
        local,
        progbeg,
        progend,
        segment,
        space,
        //stabblock, stabend, 0, stabinit, stabline, stabsym, stabtype,
        0, 0, 0, 0, 0, 0, 0,
        {
            1,
            rmap,
            0, 0, 0,    /* blkfetch, blkstore, blkloop */
            _label,
            _rule,
            _nts,
            _kids,
            _string,
            _templates,
            _functions,
            _isinstruction,
            _ntname,
        
            emit2,
            doarg,
            target,
            clobber,
            preventCSE,
            left_to_right,
            wants_callb
        }
};

